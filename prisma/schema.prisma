// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(STAFF)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoices      Invoice[]
  stockMovements StockMovement[]
  sales         Sale[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

// ================================
// INVENTORY MANAGEMENT
// ================================

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  color       String @default("#3B82F6") // Hex color for UI
  parentId    String? // For subcategory hierarchy
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryHierarchy")
  materials Material[]

  @@map("categories")
}

model Unit {
  id           String   @id @default(cuid())
  name         String   @unique // "Kilogram", "Gram", "Litre", "Adet"
  abbreviation String   @unique // "kg", "gr", "lt", "adet"
  type         UnitType
  isBaseUnit   Boolean  @default(false) // Is this the base unit for its type?
  baseUnitId   String?  // Reference to base unit
  conversionFactor Float @default(1.0) // Conversion factor to base unit
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  baseUnit          Unit? @relation("UnitConversion", fields: [baseUnitId], references: [id])
  derivedUnits      Unit[] @relation("UnitConversion")
  materials         Material[]
  recipeIngredients RecipeIngredient[]
  invoiceItems      InvoiceItem[]
  stockMovements    StockMovement[]
  transfers         WarehouseTransfer[]
  materialsPurchase Material[] @relation("PurchaseUnit")
  materialsConsumption Material[] @relation("ConsumptionUnit")

  @@map("units")
}

enum UnitType {
  WEIGHT    // kg, gr
  VOLUME    // lt, ml
  PIECE     // adet, paket
  LENGTH    // m, cm
}

model Supplier {
  id          String  @id @default(cuid())
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  taxNumber   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  materials Material[]
  invoices  Invoice[]

  @@map("suppliers")
}

model Material {
  id            String  @id @default(cuid())
  name          String
  description   String?
  categoryId    String
  purchaseUnitId    String  // Unit for purchasing
  consumptionUnitId String  // Unit for consumption/recipes
  supplierId    String?
  defaultTaxId  String? // Varsayılan KDV oranı
  
  // Stock Information
  currentStock    Float   @default(0)
  minStockLevel   Float   @default(0)
  maxStockLevel   Float?
  
  // Cost Information
  lastPurchasePrice Float?
  averageCost       Float   @default(0)
  
  // Status
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category          Category           @relation(fields: [categoryId], references: [id])
  purchaseUnit      Unit               @relation("PurchaseUnit", fields: [purchaseUnitId], references: [id])
  consumptionUnit   Unit               @relation("ConsumptionUnit", fields: [consumptionUnitId], references: [id])
  supplier          Supplier?          @relation(fields: [supplierId], references: [id])
  defaultTax        Tax?               @relation(fields: [defaultTaxId], references: [id])
  recipeIngredients RecipeIngredient[]
  invoiceItems      InvoiceItem[]
  stockMovements    StockMovement[]

  @@map("materials")
}

// ================================
// RECIPE MANAGEMENT
// ================================

model Recipe {
  id          String  @id @default(cuid())
  name        String
  description String?
  category    String? // "Ana Yemek", "Çorba", "Salata", etc.
  
  // Serving Information
  servingSize    Int     @default(1) // Kaç porsiyon
  preparationTime Int?   // Dakika cinsinden
  
  // Cost Information
  totalCost      Float   @default(0) // Toplam maliyet
  costPerServing Float   @default(0) // Porsiyon başı maliyet
  suggestedPrice Float?  // Önerilen satış fiyatı
  profitMargin   Float?  // Kâr marjı %
  
  // Status
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  ingredients RecipeIngredient[]
  sales       Sale[]

  @@map("recipes")
}

model RecipeIngredient {
  id       String @id @default(cuid())
  recipeId String
  materialId String
  unitId   String
  
  // Quantity Information
  quantity    Float // Miktar
  cost        Float @default(0) // Bu malzemenin reçetedeki maliyeti
  
  // Optional
  notes       String? // "İsteğe bağlı", "Yarım çay kaşığı" gibi notlar
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])

  @@unique([recipeId, materialId])
  @@map("recipe_ingredients")
}

// ================================
// INVOICE MANAGEMENT
// ================================

model Invoice {
  id            String      @id @default(cuid())
  invoiceNumber String      @unique
  type          InvoiceType
  supplierId    String?
  userId        String
  
  // Invoice Details
  date          DateTime
  dueDate       DateTime?
  totalAmount   Float       @default(0)
  taxAmount     Float       @default(0)
  discountAmount Float      @default(0)
  
  // Status
  status        InvoiceStatus @default(PENDING)
  paymentDate   DateTime?
  notes         String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  items          InvoiceItem[]
  stockMovements StockMovement[]

  @@map("invoices")
}

enum InvoiceType {
  PURCHASE // Alış faturası
  SALE     // Satış faturası
}

enum InvoiceStatus {
  PENDING   // Beklemede
  APPROVED  // Onaylandı
  PAID      // Ödendi
  CANCELLED // İptal edildi
}

model InvoiceItem {
  id        String @id @default(cuid())
  invoiceId String
  materialId String
  unitId    String
  taxId     String
  
  // Item Details
  quantity    Float
  unitPrice   Float
  totalPrice  Float
  taxAmount   Float @default(0)
  discountRate Float @default(0)
  discountAmount Float @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoice  Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])
  tax      Tax      @relation(fields: [taxId], references: [id])

  @@map("invoice_items")
}

// ================================
// STOCK MOVEMENT TRACKING
// ================================

model StockMovement {
  id         String           @id @default(cuid())
  materialId String
  unitId     String
  userId     String
  invoiceId  String?
  
  // Movement Details
  type       StockMovementType
  quantity   Float            // + for IN, - for OUT
  reason     String?          // "Alış", "Satış", "Fire", "Sayım Farkı"
  
  // Cost Information
  unitCost   Float?
  totalCost  Float?
  
  // Stock Levels (snapshot)
  stockBefore Float
  stockAfter  Float
  
  date       DateTime @default(now())
  createdAt  DateTime @default(now())

  // Relations
  material Material @relation(fields: [materialId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  invoice  Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("stock_movements")
}

enum StockMovementType {
  IN          // Giriş
  OUT         // Çıkış
  ADJUSTMENT  // Sayım düzeltmesi
  WASTE       // Fire
  TRANSFER    // Transfer
}

// ================================
// SALES TRACKING
// ================================

model Sale {
  id       String @id @default(cuid())
  recipeId String?
  userId   String
  
  // Sale Details
  itemName     String  // Satılan ürün adı
  quantity     Int     @default(1)
  unitPrice    Float   // Satış fiyatı
  totalPrice   Float   // Toplam satış
  
  // Cost Information
  totalCost    Float   @default(0) // Toplam maliyet
  grossProfit  Float   @default(0) // Brüt kâr
  profitMargin Float   @default(0) // Kâr marjı %
  
  // Additional Info
  customerName String?
  notes        String?
  
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  recipe Recipe? @relation(fields: [recipeId], references: [id])
  user   User    @relation(fields: [userId], references: [id])

  @@map("sales")
}

// ================================
// REPORTING & ANALYTICS
// ================================

model DailySummary {
  id    String   @id @default(cuid())
  date  DateTime @unique
  
  // Sales Summary
  totalSales       Float @default(0)
  totalSalesCount  Int   @default(0)
  
  // Cost Summary
  totalPurchases   Float @default(0)
  totalCosts       Float @default(0)
  
  // Profit Summary
  grossProfit      Float @default(0)
  netProfit        Float @default(0)
  profitMargin     Float @default(0)
  
  // Additional Metrics
  totalWaste       Float @default(0)
  totalAdjustments Float @default(0)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("daily_summaries")
}

// ================================
// SYSTEM SETTINGS
// ================================

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  SettingType @default(STRING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// ================================
// TAX MANAGEMENT
// ================================

model Tax {
  id          String  @id @default(cuid())
  name        String  @unique // "KDV %1", "KDV %20", "ÖTV %50"
  rate        Float   // 1.0, 20.0, 50.0
  type        TaxType @default(VAT)
  description String?
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false) // Varsayılan KDV oranı
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoiceItems InvoiceItem[]
  materials    Material[]

  @@map("taxes")
}

enum TaxType {
  VAT    // KDV
  EXCISE // ÖTV
  OTHER  // Diğer
}