// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ================================
// USER MANAGEMENT
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      UserRole @default(STAFF)
  isSuperAdmin Boolean @default(false)
  isActive    Boolean @default(true)
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoices           Invoice[]
  stockMovements     StockMovement[]
  sales              Sale[]
  stockCountsCounted StockCount[] @relation("CountedBy")
  stockCountsApproved StockCount[] @relation("ApprovedBy")
  stockAdjustments   StockAdjustment[]
  warehouseTransfers WarehouseTransfer[]
  userPermissions    UserPermission[]
  activityLogs       ActivityLog[]

  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

// ================================
// PERMISSION MANAGEMENT
// ================================

model Module {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  code        String   @unique // Unique code for the module (e.g., "inventory", "recipes")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  permissions Permission[]

  @@map("modules")
}

model Permission {
  id          String   @id @default(cuid())
  moduleId    String
  name        String
  description String?
  code        String   // Permission code (e.g., "view", "create", "edit", "delete")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module          Module           @relation(fields: [moduleId], references: [id])
  userPermissions UserPermission[]

  @@unique([moduleId, code])
  @@map("permissions")
}

model UserPermission {
  id           String   @id @default(cuid())
  userId       String
  permissionId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user       User       @relation(fields: [userId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// ================================
// ACTIVITY LOGGING
// ================================

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  action      String   // "create", "update", "delete"
  entityType  String   // The type of entity (e.g., "material", "recipe")
  entityId    String   // The ID of the affected entity
  details     String?  // JSON string with details about the changes
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id])

  @@index([entityType, entityId])
  @@index([userId])
  @@index([createdAt])
  @@map("activity_logs")
}

// ================================
// INVENTORY MANAGEMENT
// ================================

model Category {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  color       String @default("#3B82F6") // Hex color for UI
  parentId    String? // For subcategory hierarchy
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent        Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryHierarchy")
  materials Material[]

  @@map("categories")
}

model Unit {
  id           String   @id @default(cuid())
  name         String   @unique // "Kilogram", "Gram", "Litre", "Adet"
  abbreviation String   @unique // "kg", "gr", "lt", "adet"
  type         UnitType
  isBaseUnit   Boolean  @default(false) // Is this the base unit for its type?
  baseUnitId   String?  // Reference to base unit
  conversionFactor Float @default(1.0) // Conversion factor to base unit
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  baseUnit          Unit? @relation("UnitConversion", fields: [baseUnitId], references: [id])
  derivedUnits      Unit[] @relation("UnitConversion")
  recipeIngredients RecipeIngredient[]
  invoiceItems      InvoiceItem[]
  stockMovements    StockMovement[]
  materialsPurchase Material[] @relation("PurchaseUnit")
  materialsConsumption Material[] @relation("ConsumptionUnit")
  warehouseTransfers WarehouseTransfer[]

  @@map("units")
}

enum UnitType {
  WEIGHT    // kg, gr
  VOLUME    // lt, ml
  PIECE     // adet, paket
  LENGTH    // m, cm
}

model Supplier {
  id          String  @id @default(cuid())
  name        String
  contactName String?
  phone       String?
  email       String?
  address     String?
  taxNumber   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  materials Material[]
  invoices  Invoice[]

  @@map("suppliers")
}

model Warehouse {
  id          String      @id @default(cuid())
  name        String
  description String?
  location    String?
  type        WarehouseType @default(GENERAL)
  capacity    Float?      // kg cinsinden
  minTemperature Float?   // °C
  maxTemperature Float?   // °C
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  materials     Material[]
  materialStocks MaterialStock[]
  transfersFrom WarehouseTransfer[] @relation("FromWarehouse")
  transfersTo   WarehouseTransfer[] @relation("ToWarehouse")
  invoiceItems  InvoiceItem[]
  stockCounts   StockCount[]
  stockAdjustments StockAdjustment[]

  @@map("warehouses")
}

enum WarehouseType {
  GENERAL  // Genel depo
  COLD     // Soğuk hava deposu
  FREEZER  // Dondurucu
  DRY      // Kuru gıda deposu
  KITCHEN  // Mutfak deposu
}

model Material {
  id            String  @id @default(cuid())
  name          String
  description   String?
  categoryId    String
  purchaseUnitId    String  // Unit for purchasing
  consumptionUnitId String  // Unit for consumption/recipes
  supplierId    String?
  defaultTaxId  String? // Varsayılan KDV oranı
  defaultWarehouseId String? // Varsayılan depo
  
  // Stock Information
  currentStock    Float   @default(0)
  minStockLevel   Float   @default(0)
  maxStockLevel   Float?
  
  // Cost Information
  lastPurchasePrice Float?
  averageCost       Float   @default(0)
  
  // Status
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  category          Category           @relation(fields: [categoryId], references: [id])
  purchaseUnit      Unit               @relation("PurchaseUnit", fields: [purchaseUnitId], references: [id])
  consumptionUnit   Unit               @relation("ConsumptionUnit", fields: [consumptionUnitId], references: [id])
  supplier          Supplier?          @relation(fields: [supplierId], references: [id])
  defaultTax        Tax?               @relation(fields: [defaultTaxId], references: [id])
  defaultWarehouse  Warehouse?         @relation(fields: [defaultWarehouseId], references: [id])
  recipeIngredients RecipeIngredient[]
  invoiceItems      InvoiceItem[]
  stockMovements    StockMovement[]
  materialStocks    MaterialStock[]
  stockCountItems   StockCountItem[]
  stockAdjustments  StockAdjustment[]
  materialTransfers WarehouseTransfer[] @relation("MaterialTransfers")

  @@map("materials")
}

model MaterialStock {
  id            String    @id @default(cuid())
  materialId    String
  warehouseId   String
  currentStock  Float     @default(0) // gram cinsinden
  availableStock Float    @default(0) // rezerve edilmemiş stok
  reservedStock Float     @default(0) // rezerve edilmiş stok
  location      String?   // Raf/konum bilgisi
  averageCost   Float     @default(0)
  lastUpdated   DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  material    Material  @relation(fields: [materialId], references: [id])
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])

  @@unique([materialId, warehouseId])
  @@map("material_stocks")
}

model WarehouseTransfer {
  id              String                @id @default(cuid())
  fromWarehouseId String
  toWarehouseId   String
  materialId      String
  unitId          String
  quantity        Float                 // gram cinsinden
  reason          String
  status          WarehouseTransferStatus @default(PENDING)
  requestDate     DateTime              @default(now())
  approvedDate    DateTime?
  completedDate   DateTime?
  userId          String
  approvedBy      String?
  totalCost       Float?
  notes           String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  // Relations
  fromWarehouse Warehouse @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse   Warehouse @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  material      Material  @relation("MaterialTransfers", fields: [materialId], references: [id])
  unit          Unit      @relation(fields: [unitId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@map("warehouse_transfers")
}

enum WarehouseTransferStatus {
  PENDING     // Beklemede
  APPROVED    // Onaylandı
  IN_TRANSIT  // Transfer halinde
  COMPLETED   // Tamamlandı
  CANCELLED   // İptal edildi
}

// ================================
// STOCK COUNT MANAGEMENT
// ================================

model StockCount {
  id          String           @id @default(cuid())
  countNumber String           @unique
  warehouseId String
  status      StockCountStatus @default(PLANNING)
  countDate   DateTime
  countTime   String?          // "14:30" formatında
  countedBy   String
  approvedBy  String?
  notes       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  warehouse    Warehouse         @relation(fields: [warehouseId], references: [id])
  countedUser  User              @relation("CountedBy", fields: [countedBy], references: [id])
  approvedUser User?             @relation("ApprovedBy", fields: [approvedBy], references: [id])
  items        StockCountItem[]
  adjustments  StockAdjustment[]

  @@map("stock_counts")
}

enum StockCountStatus {
  PLANNING         // Planlama aşaması
  IN_PROGRESS      // Sayım devam ediyor
  PENDING_APPROVAL // Onay bekliyor
  COMPLETED        // Tamamlandı ve onaylandı
  CANCELLED        // İptal edildi
}

model StockCountItem {
  id           String    @id @default(cuid())
  stockCountId String
  materialId   String
  systemStock  Float     @default(0) // Sistemdeki stok (gram)
  countedStock Float     @default(0) // Sayılan stok (gram)
  difference   Float     @default(0) // Fark (+ fazla, - eksik)
  reason       String?   // Fark sebebi
  countedAt    DateTime? // Sayım tarihi
  isCompleted  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  stockCount StockCount @relation(fields: [stockCountId], references: [id], onDelete: Cascade)
  material   Material   @relation(fields: [materialId], references: [id])

  @@unique([stockCountId, materialId])
  @@map("stock_count_items")
}

model StockAdjustment {
  id             String         @id @default(cuid())
  stockCountId   String
  materialId     String
  warehouseId    String
  adjustmentType AdjustmentType
  quantity       Float          // gram cinsinden
  reason         String
  adjustedBy     String
  createdAt      DateTime       @default(now())

  // Relations
  stockCount StockCount @relation(fields: [stockCountId], references: [id])
  material   Material   @relation(fields: [materialId], references: [id])
  warehouse  Warehouse  @relation(fields: [warehouseId], references: [id])
  user       User       @relation(fields: [adjustedBy], references: [id])

  @@map("stock_adjustments")
}

enum AdjustmentType {
  INCREASE // Artış
  DECREASE // Azalış
}

// ================================
// RECIPE MANAGEMENT
// ================================

model Recipe {
  id          String  @id @default(cuid())
  name        String
  description String?
  category    String? // "Ana Yemek", "Çorba", "Salata", etc.
  
  // Serving Information
  servingSize    Int     @default(1) // Kaç porsiyon
  preparationTime Int?   // Dakika cinsinden
  
  // Cost Information
  totalCost      Float   @default(0) // Toplam maliyet
  costPerServing Float   @default(0) // Porsiyon başı maliyet
  suggestedPrice Float?  // Önerilen satış fiyatı
  profitMargin   Float?  // Kâr marjı %
  
  // Status
  isActive   Boolean @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  ingredients RecipeIngredient[]
  sales       Sale[]
  mappings    RecipeMapping[]

  @@map("recipes")
}

model RecipeIngredient {
  id       String @id @default(cuid())
  recipeId String
  materialId String
  unitId   String
  
  // Quantity Information
  quantity    Float // Miktar
  cost        Float @default(0) // Bu malzemenin reçetedeki maliyeti
  
  // Optional
  notes       String? // "İsteğe bağlı", "Yarım çay kaşığı" gibi notlar
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])

  @@unique([recipeId, materialId])
  @@map("recipe_ingredients")
}

// ================================
// SALES ITEMS MANAGEMENT
// ================================

model SalesItemCategory {
  id          String @id @default(cuid())
  name        String @unique // "Ana Yemek", "Çorba", "Salata", "İçecek", "Tatlı"
  description String?
  color       String @default("#3B82F6") // Hex color for UI
  sortOrder   Int    @default(0) // Display order
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  groups     SalesItemGroup[]
  salesItems SalesItem[]

  @@map("sales_item_categories")
}

model SalesItemGroup {
  id          String @id @default(cuid())
  name        String // "Et Yemekleri", "Sebze Yemekleri", "Soğuk İçecekler"
  categoryId  String
  description String?
  color       String @default("#6B7280") // Hex color for UI
  sortOrder   Int    @default(0) // Display order within category
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category   SalesItemCategory @relation(fields: [categoryId], references: [id])
  salesItems SalesItem[]

  @@unique([categoryId, name])
  @@map("sales_item_groups")
}

model SalesItem {
  id          String @id @default(cuid())
  name        String // "Kuşbaşılı Pilav", "Mercimek Çorbası"
  categoryId  String
  groupId     String?
  description String?
  
  // Pricing Information
  basePrice   Float?  // Temel satış fiyatı (KDV Dahil)
  taxPercent  Float   @default(10.0) // KDV oranı %
  
  // Menu Information
  menuCode    String? // Menü kodu (M001, A015 gibi)
  sortOrder   Int     @default(0) // Menüde görünüm sırası
  
  // Status
  isActive    Boolean @default(true)
  isAvailable Boolean @default(true) // Günlük müsaitlik
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category SalesItemCategory @relation(fields: [categoryId], references: [id])
  group    SalesItemGroup?   @relation(fields: [groupId], references: [id])
  mappings RecipeMapping[]
  sales    Sale[]

  @@unique([categoryId, name])
  @@map("sales_items")
}

model RecipeMapping {
  id           String @id @default(cuid())
  salesItemId  String
  recipeId     String
  
  // Mapping Information
  portionRatio Float  @default(1.0) // 1 satış malı = kaç porsiyon reçete
  priority     Int    @default(1)   // Birden fazla reçete varsa öncelik
  
  // Cost Override
  overrideCost Float? // Manuel maliyet geçersiz kılma
  
  // Status
  isActive     Boolean @default(true)
  
  // Dates
  validFrom    DateTime? // Geçerlilik başlangıcı
  validTo      DateTime? // Geçerlilik bitişi
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  salesItem SalesItem @relation(fields: [salesItemId], references: [id], onDelete: Cascade)
  recipe    Recipe    @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@unique([salesItemId, recipeId])
  @@map("recipe_mappings")
}
// ================================
// INVOICE MANAGEMENT
// ================================

model Invoice {
  id            String      @id @default(cuid())
  invoiceNumber String      @unique
  type          InvoiceType
  supplierId    String?
  userId        String
  
  // Invoice Details
  date          DateTime
  dueDate       DateTime?
  subtotalAmount Float      @default(0) // KDV hariç toplam
  totalDiscountAmount Float @default(0) // Toplam indirim
  totalTaxAmount Float      @default(0) // Toplam KDV
  totalAmount   Float       @default(0) // Genel toplam
  
  // Status
  status        InvoiceStatus @default(PENDING)
  paymentDate   DateTime?
  notes         String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  items          InvoiceItem[]
  stockMovements StockMovement[]

  @@map("invoices")
}

enum InvoiceType {
  PURCHASE // Alış faturası
  SALE     // Satış faturası
  RETURN   // İade faturası
}

enum InvoiceStatus {
  PENDING   // Beklemede
  APPROVED  // Onaylandı
  PAID      // Ödendi
  CANCELLED // İptal edildi
}

model InvoiceItem {
  id        String @id @default(cuid())
  invoiceId String
  materialId String
  unitId    String
  warehouseId String
  taxId     String
  
  // Item Details
  quantity    Float
  unitPrice   Float   // KDV hariç birim fiyat
  
  // Discount Information
  discount1Rate Float @default(0) // İndirim 1 %
  discount2Rate Float @default(0) // İndirim 2 %
  discount1Amount Float @default(0) // İndirim 1 tutarı
  discount2Amount Float @default(0) // İndirim 2 tutarı
  totalDiscountAmount Float @default(0) // Toplam indirim
  
  // Calculated Amounts
  subtotalAmount Float @default(0) // İndirim sonrası KDV hariç tutar
  taxAmount     Float @default(0) // KDV tutarı
  totalAmount   Float @default(0) // Satır toplamı (KDV dahil)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoice   Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  material  Material  @relation(fields: [materialId], references: [id])
  unit      Unit      @relation(fields: [unitId], references: [id])
  warehouse Warehouse @relation(fields: [warehouseId], references: [id])
  tax       Tax       @relation(fields: [taxId], references: [id])

  @@map("invoice_items")
}

// ================================
// STOCK MOVEMENT TRACKING
// ================================

model StockMovement {
  id         String           @id @default(cuid())
  materialId String
  unitId     String
  userId     String
  invoiceId  String?
  
  // Movement Details
  type       StockMovementType
  quantity   Float            // + for IN, - for OUT
  reason     String?          // "Alış", "Satış", "Fire", "Sayım Farkı"
  
  // Cost Information
  unitCost   Float?
  totalCost  Float?
  
  // Stock Levels (snapshot)
  stockBefore Float
  stockAfter  Float
  
  date       DateTime @default(now())
  createdAt  DateTime @default(now())

  // Relations
  material Material @relation(fields: [materialId], references: [id])
  unit     Unit     @relation(fields: [unitId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  invoice  Invoice? @relation(fields: [invoiceId], references: [id])

  @@map("stock_movements")
}

enum StockMovementType {
  IN          // Giriş
  OUT         // Çıkış
  ADJUSTMENT  // Sayım düzeltmesi
  WASTE       // Fire
  TRANSFER    // Transfer
}

// ================================
// SALES TRACKING
// ================================

model Sale {
  id       String @id @default(cuid())
  salesItemId String? // Satış malı referansı
  recipeId    String? // Eski reçete referansı (backward compatibility)
  userId   String
  
  // Sale Details
  itemName     String  // Satılan ürün adı
  quantity     Int     @default(1)
  unitPrice    Float   // Satış fiyatı
  totalPrice   Float   // Toplam satış
  
  // Cost Information
  totalCost    Float   @default(0) // Toplam maliyet
  grossProfit  Float   @default(0) // Brüt kâr
  profitMargin Float   @default(0) // Kâr marjı %
  
  // Additional Info
  customerName String?
  notes        String?
  
  date         DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  salesItem SalesItem? @relation(fields: [salesItemId], references: [id])
  recipe Recipe? @relation(fields: [recipeId], references: [id])
  user   User    @relation(fields: [userId], references: [id])

  @@map("sales")
}

// ================================
// REPORTING & ANALYTICS
// ================================

model DailySummary {
  id    String   @id @default(cuid())
  date  DateTime @unique
  
  // Sales Summary
  totalSales       Float @default(0)
  totalSalesCount  Int   @default(0)
  
  // Cost Summary
  totalPurchases   Float @default(0)
  totalCosts       Float @default(0)
  
  // Profit Summary
  grossProfit      Float @default(0)
  netProfit        Float @default(0)
  profitMargin     Float @default(0)
  
  // Additional Metrics
  totalWaste       Float @default(0)
  totalAdjustments Float @default(0)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("daily_summaries")
}

// ================================
// SYSTEM SETTINGS
// ================================

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  SettingType @default(STRING)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// ================================
// TAX MANAGEMENT
// ================================

model Tax {
  id          String  @id @default(cuid())
  name        String  @unique // "KDV %1", "KDV %20", "ÖTV %50"
  rate        Float   // 1.0, 20.0, 50.0
  type        TaxType @default(VAT)
  description String?
  isActive    Boolean @default(true)
  isDefault   Boolean @default(false) // Varsayılan KDV oranı
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  invoiceItems InvoiceItem[]
  materials    Material[]

  @@map("taxes")
}

enum TaxType {
  VAT    // KDV
  EXCISE // ÖTV
  OTHER  // Diğer
}